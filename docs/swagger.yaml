definitions:
  dto.Login:
    properties:
      email:
        example: user@email.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      expires_at:
        type: string
      name:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  dto.Message:
    properties:
      message:
        type: string
    type: object
  dto.Oauth2Client:
    properties:
      client_id:
        type: string
      description:
        type: string
      domain:
        type: string
      name:
        type: string
    required:
    - client_id
    - domain
    - name
    type: object
  dto.Oauth2ClientResponse:
    properties:
      client_id:
        type: string
      name:
        type: string
      secret_key:
        type: string
    required:
    - client_id
    - name
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
    type: object
  dto.UserRegisterRequest:
    properties:
      confirm_password:
        example: password
        maxLength: 30
        minLength: 6
        type: string
      email:
        example: william@debozero.id
        type: string
      name:
        example: William
        maxLength: 60
        minLength: 3
        type: string
      password:
        example: password
        maxLength: 30
        minLength: 6
        type: string
      phone:
        example: "08218833123"
        type: string
      username:
        example: william
        maxLength: 60
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    - phone
    - username
    type: object
  dto.VerifyResponse:
    properties:
      user_id:
        type: string
    type: object
  global.Response-dto_LoginResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.LoginResponse'
      message:
        type: string
      status:
        type: string
    type: object
  global.Response-dto_Message:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.Message'
      message:
        type: string
      status:
        type: string
    type: object
  global.Response-dto_Oauth2ClientResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.Oauth2ClientResponse'
      message:
        type: string
      status:
        type: string
    type: object
  global.Response-dto_RefreshTokenResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.RefreshTokenResponse'
      message:
        type: string
      status:
        type: string
    type: object
  global.Response-dto_VerifyResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.VerifyResponse'
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact:
    email: debidarmawan1998@gmail.com
    name: DeboZero Tech Team
  description: This is an API documentation of DeboZero Core Backend Service
  title: DeboZero Core Service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_LoginResponse'
      summary: Login to get access token
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_Message'
      security:
      - Bearer: []
      summary: Remove/Invalidate an access token
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_RefreshTokenResponse'
      summary: Refresh an access token (get a new one)
      tags:
      - Auth
  /auth/verify:
    get:
      consumes:
      - application/json
      parameters:
      - description: Path
        in: header
        name: X-Path
        required: true
        type: string
      - description: Method
        in: header
        name: X-Method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_VerifyResponse'
      security:
      - Bearer: []
      summary: Verify an access token to get the user id
      tags:
      - Auth
  /oauth2/client:
    post:
      consumes:
      - application/json
      description: Create Oauth2 Client
      parameters:
      - description: Oauth2 Client data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.Oauth2Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_Oauth2ClientResponse'
      summary: Create Oauth2 Client
      tags:
      - Oauth2 Client
  /users/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.Response-dto_Message'
      summary: Create an account
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-KEY
    type: apiKey
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
